Object-Oriented Programming (OOP) is a programming paradigm based on the concept of “objects”.

Objects are instances of classes that bundle together data (attributes) and functions (methods) that operate on that data.

OOP helps you organize code better, make it reusable, scalable, and easier to maintain.

🔹 1. Class - A class is a blueprint or template for creating objects.
🔹 2. Object - An object is an instance of a class. It represents a real-world entity with state and behavior.
🔹 3. Encapsulation - Encapsulation is the concept of restricting direct access to some components of an object and using getter and setter methods.
🔹 4. Inheritance - Inheritance allows a class to use properties and methods from another class. It helps in code reusability.
🔹 5. Polymorphism - Polymorphism means “many forms” – the same method name can behave differently based on the object.
🔹 6. Abstraction - Abstraction means hiding the complex internal logic and showing only the essential features to the user. In Python, it's done using abstract base classes.

🔄 Summary Table

OOP Concept	                    Description
Class	                        Blueprint for creating objects
Object	                        Instance of a class
Encapsulation	                Hides internal data, uses methods to access it
Inheritance	                    Allows one class to inherit features of another
Polymorphism	                Same method behaves differently based on object
Abstraction	                    Hides complexity, shows only important info


🧱 Summary Table
Feature	                          Keyword / Usage
Class	                          class
Object	                          obj = Class()
Constructor	                      __init__
Encapsulation	                  __private, get/set methods
Inheritance	                      class Child(Parent)
Polymorphism	                  Method overriding
Abstraction	                      ABC, abstractmethod